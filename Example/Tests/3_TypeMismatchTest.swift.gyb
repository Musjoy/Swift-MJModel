//
//  MismatchTypeTest.swift
//  MJModel_Tests
//
//  Created by 黄磊 on 2019/8/7.
//  Copyright © 2019 CocoaPods. All rights reserved.
//  类型不匹配测试

import Foundation
import XCTest
import MJModel
%{
class_types = ['struct', 'class']
}%

%{ import csv }%
% with open('mismatch_typs.csv') as mismatch_typs_file:
%{
# 从表格中读取
base_types = []
cur_type_info = None
for row in csv.DictReader(mismatch_typs_file):
    a_type = row["Type"]
    a_mismatch_type = row["MismatchType"]
    a_convert_addition = row["ConvertAddition"]
    if a_type:
        if cur_type_info :
            base_types.append(cur_type_info)
        cur_type_info = {}
        cur_type_info['type'] = a_type
        cur_type_info['mismatch_types'] = []
    if not a_mismatch_type or not cur_type_info :
        continue
    mismatch_types = cur_type_info['mismatch_types']
    mismatch_type_info = {}
    mismatch_type_info['mismatch_type'] = a_mismatch_type
    mismatch_type_info['convert_addition'] = (a_convert_addition if a_convert_addition else '')
    mismatch_types.append(mismatch_type_info)
    cur_type_info['mismatch_types'] = mismatch_types
if cur_type_info :
    base_types.append(cur_type_info)
}%

% end

class _3_MismatchTypeTest: XCTestCase {

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    // test base type one by one
    % for a_class_type in class_types :
    % for a_type_info in base_types :
    %{a_type=a_type_info['type']}%
    %{mismatch_types=a_type_info['mismatch_types']}%
    % for a_mismatch_type_info  in mismatch_types :
    %{a_mismatch_type=a_mismatch_type_info['mismatch_type']}%
    %{a_convert_addition=a_mismatch_type_info['convert_addition']}%
    /// Test ${a_type} from ${a_mismatch_type} in ${a_class_type} to json string and convert back
    func test${a_class_type[:1].upper() + a_class_type[1:]}${a_type}From${a_mismatch_type}ToModel () {
    
        %{attr_name=a_type[:1].lower() + a_type[1:]}%
        let arrValues = mismatchValuesFrom(${a_mismatch_type}.self, to:${a_type}.self)
        XCTAssertNotNil(arrValues)
        for value in arrValues! {
        
            let dic = ["${attr_name}":value,"${attr_name}Optionl":value,"${attr_name}Unwrapped":value]
            let modelResult = ${'Enum' if (a_type=='EnumInt') else 'BaseType'}${a_class_type[:1].upper() + a_class_type[1:]}.initWith(dic)
            % if a_convert_addition and a_convert_addition[-1] != ':' :
            % if a_convert_addition[-1] == ')' :
            let resultValue = ${a_convert_addition}
            % else :
            let resultValue = ${a_type}(${a_convert_addition})
            % end
            % else :
            let resultValue = ${a_type}(${a_convert_addition}value)
            % end
            
            XCTAssertNotNil(modelResult)
            XCTAssertEqual(modelResult?.${attr_name}, resultValue)
            XCTAssertEqual(modelResult?.${attr_name}Optionl, resultValue)
            XCTAssertEqual(modelResult?.${attr_name}Unwrapped, resultValue)
        }
    }
    
    /// Test ${a_type} from ${a_mismatch_type} in ${a_class_type} to json string and convert back
    func test${a_class_type[:1].upper() + a_class_type[1:]}${a_type}From${a_mismatch_type}UnexpectedToModel () {
    
        %{attr_name=a_type[:1].lower() + a_type[1:]}%
        let arrValues = mismatchUnexpectedValuesFrom(${a_mismatch_type}.self, to:${a_type}.self)
        XCTAssertNotNil(arrValues)
        for value in arrValues! {
        
            let dic = ["${attr_name}":value,"${attr_name}Optionl":value,"${attr_name}Unwrapped":value]
            let modelResult = ${'Enum' if (a_type=='EnumInt') else 'BaseType'}${a_class_type[:1].upper() + a_class_type[1:]}.initWith(dic)
            % if a_convert_addition and a_convert_addition[-1] != ':' :
            % if a_convert_addition[-1] == ')' :
            let resultValue : ${a_type}? = ${a_convert_addition}
            % else :
            let resultValue : ${a_type}? = ${a_type}(${a_convert_addition})
            % end
            % else :
            let resultValue : ${a_type}? = ${a_type}(${a_convert_addition}value)
            % end
            
            XCTAssertNotNil(modelResult)
            if (resultValue == nil) {
                XCTAssertEqual(modelResult?.${attr_name}, ${'.One' if (a_type=='EnumInt') else 'empertyValueForType('+a_type+'.self)!'})
                XCTAssertNil(modelResult?.${attr_name}Optionl)
                XCTAssertNil(modelResult?.${attr_name}Unwrapped)
            } else {
                if (resultValue! == empertyValueForType(${a_type}.self)!) {
                    XCTAssertEqual(modelResult?.${attr_name}, resultValue!)
                } else {
                    XCTAssertNotEqual(modelResult?.${attr_name}, resultValue!)
                }
                XCTAssertNotEqual(modelResult?.${attr_name}Optionl, resultValue!)
                XCTAssertNotEqual(modelResult?.${attr_name}Unwrapped, resultValue!)
            }
            
        }
    }
    % end
    % end

    % end

}

